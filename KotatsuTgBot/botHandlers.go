// ------------------------------------
// RR IT 2024
//
// ------------------------------------

//
// ----------------------------------------------------------------------------------
//
// 								–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É
//
// ----------------------------------------------------------------------------------
//

package main

import (
	//–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
	"rr/kotatsutgbot/config"
	"rr/kotatsutgbot/db"
	"rr/kotatsutgbot/gen_certs"
	"rr/kotatsutgbot/keyboards"
	"rr/kotatsutgbot/rr_debug"

	//–°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"

	//–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
	"bytes"
	"context"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
)

// –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
func RemoveIndex(s []int64, index int) []int64 {
	return append(s[:index], s[index+1:]...)
}

//
// –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
//

func BotHandler_Default(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update == nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ update –ø—É—Å—Ç
		return
	} else {
		if update.Message == nil {
			if update.CallbackQuery == nil {
				return
			} else {

				db_answer_code, user := db.DB_GET_User_BY_UserTgID(update.CallbackQuery.From.ID)
				switch db_answer_code {
				case db.DB_ANSWER_SUCCESS:
					BotHandler_CallbackQuery(ctx, b, update, user)

				case db.DB_ANSWER_OBJECT_NOT_FOUND:
					proccessRegistrationCallback(ctx, b, update)
				}

			}
		} else {
			if update.Message.From == nil {
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ Chat –∏–ª–∏ From —Ä–∞–≤–Ω—ã nil
				return
			} else {
				if update.Message.Chat.ID == config.GetConfig().CONFIG_ID_CHAT_SUPPORT {
					return
				} else {
					db_answer_code, user := db.DB_GET_User_BY_UserTgID(update.Message.From.ID)
					switch db_answer_code {
					case db.DB_ANSWER_SUCCESS:
						switch update.Message.Text {
						case "‚õ© –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±":
							proccessText_JoinClub(ctx, b, update, user)

						case "üìù –ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
							proccessText_SigningUpForActivity(ctx, b, update)

						case "üì∞ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É":
							proccessText_SubscribeNewsletter(ctx, b, update, user)

						case "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏":
							proccessText_UnsubscribeNewsletter(ctx, b, update, user)

						case "üìü –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª—É–±–æ–º":
							proccessText_ContactClubManager(ctx, b, update, user)

						case "üìü –°–≤—è–∑—å —Å –∫–ª—É–±–æ–º":
							proccessText_ContactClubManager(ctx, b, update, user)

						case "‚òéÔ∏è –°–≤—è–∑—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –∫–ª—É–±–∞":
							proccessText_ContactClubManager(ctx, b, update, user)

						case "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
							proccessText_BackMeinMenu(ctx, b, update, user)

						case "üö™ –ü–æ–∫–∏–Ω—É—Ç—å –∫–ª—É–±":
							proccessText_LeaveClub(ctx, b, update, user)

						case "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
							proccessText_SigningUpForActivity(ctx, b, update)

						case "ü§ù –ê–∫—Ü–∏–∏ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã":
							proccessText_Partners(ctx, b, update)

						case "üü° –ê–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞":
							processText_AnimeRoulette(ctx, b, update, user)

						case "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä—É–ª–µ—Ç–∫–∏":
							processText_AnimeRoulette(ctx, b, update, user)

						case "‚¨ÖÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
							proccessText_BackMeinMenu(ctx, b, update, user)

						case "‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫–µ":
							processText_AnimeRoulette_Participate(ctx, b, update, user)

						case "üö™ –ü–æ–∫–∏–Ω—É—Ç—å —Ä—É–ª–µ—Ç–∫—É":
							processText_AnimeRoulette_CancelParticipate(ctx, b, update, user)

						case "‚ùî –ó–∞–≥–∞–¥–∞—Ç—å –∞–Ω–∏–º–µ":
							processText_AnimeRoulette_AnimeWish(ctx, b, update, user)

						case "üóû –†–∞—Å—Å—ã–ª–∫–∞":
							proccessText_InDevelopment(ctx, b, update)

						case "üìã –ü—Ä–∞–≤–∏–ª–∞":
							proccessText_AnimeRoulette_Rules(ctx, b, update)

						case "üìî –¢–µ–º–∞":
							proccessText_AnimeRoulette_MainTheme(ctx, b, update)

						case "üìö –ú–æ–π —Å–ø–∏—Å–æ–∫":
							proccessText_AnimeRoulette_LinkMyList(ctx, b, update, user)

						case "üìÇ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
							proccessText_MyActivities(ctx, b, update, user)

						case "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
							proccessText_BackMeinMenu(ctx, b, update, user)

						default:

							switch user.Step {
							case config.STEP_MESSAGE_SUPPORT:
								proccessStep_ContactClubManager(ctx, b, update, user)

							case config.STEP_ITMO_ENTER_ISU:
								proccessStep_ITMO_EnterISU(ctx, b, update, user, "join_club")

							case config.STEP_APPOINTMENT_ITMO_ENTER_ISU:
								proccessStep_ITMO_EnterISU(ctx, b, update, user, "activity")

							case config.STEP_ITMO_ENTER_FULLNAME:
								proccessStep_ITMO_EnterFullName(ctx, b, update, user, "join_club")

							case config.STEP_APPOINTMENT_ITMO_ENTER_FULLNAME:
								proccessStep_ITMO_EnterFullName(ctx, b, update, user, "activity")

							case config.STEP_ITMO_ENTER_SECRET_CODE:
								proccessStep_EnterSecretCode(ctx, b, update, user, "itmo")

							case config.STEP_NOITMO_ENTER_FULLNAME:
								proccessStep_NoITMO_EnterFullName(ctx, b, update, user, "join_club")

							case config.STEP_APPOINTMENT_NOITMO_ENTER_FULLNAME:
								proccessStep_NoITMO_EnterFullName(ctx, b, update, user, "activity")

							case config.STEP_NOITMO_ENTER_PHONE:
								proccessStep_NoITMO_EnterPhoneNumber(ctx, b, update, user, "join_club")

							case config.STEP_CHANGING_PHONE:
								proccessStep_ChangePhoneNumber(ctx, b, update, user)

							case config.STEP_APPOINTMENT_NOITMO_ENTER_PHONE:
								proccessStep_NoITMO_EnterPhoneNumber(ctx, b, update, user, "activity")

							case config.STEP_NOITMO_ENTER_SECRET_CODE:
								proccessStep_EnterSecretCode(ctx, b, update, user, "no_itmo")

							case config.STEP_USER_LEAVES_CLUB:
								proccessStep_LeavesClub(ctx, b, update, user)

							case config.STEP_ANIME_RUOLETTE_ENTER_ENIGMATIC_TITLE:
								proccessStep_AnimeRoulette_EnterEnigmaticTitle(ctx, b, update, user)

							case config.STEP_ANIME_RUOLETTE_ENTER_LINK_MY_ANIME_LIST:
								proccessStep_AnimeRoulette_EnterLinkMyAnimeList(ctx, b, update, user)

							default:
								proccessText_Unknown(ctx, b, update)
							}

						}
					case db.DB_ANSWER_OBJECT_NOT_FOUND:
						proccessRegistrationMessage(ctx, b, update)
					}
				}
			}
		}
	}
}

// –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
func proccessRegistrationMessage(ctx context.Context, b *bot.Bot, update *models.Update) {

	params := &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		ParseMode: models.ParseModeHTML,
	}

	if update.Message.Text == "üóÉ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" {
		full_tg_name := update.Message.From.FirstName + " " + update.Message.From.LastName
		db_answer_reg := regUser(update.Message.From.ID, full_tg_name, update.Message.From.Username)

		switch db_answer_reg {
		case db.DB_ANSWER_SUCCESS:
			params.Text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
			params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(false)

		case db.DB_ANSWER_OBJECT_EXISTS:
			params.Text = "–¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞) —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ" + "\n" +
				"–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª:"

			_, old_user := db.DB_GET_User_BY_UserTgID(update.Message.From.ID)

			if old_user.IsClubMember {
				params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsClubMember(old_user.IsSubscribeNewsletter)
			} else {
				params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(old_user.IsSubscribeNewsletter)
			}

		default:
			params.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î"
			rr_debug.PrintLOG("main.go", "update.Message.Text", "activity_GetObjects()", "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î", "")
		}
	} else {
		params.Text = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ" + "\n" +
			"–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å 152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª."
		params.ReplyMarkup = keyboards.Registration
	}

	_, err := b.SendMessage(ctx, params)
	if err != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessRegistration", "bot.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err.Error())
	}
}

// –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –∫—É–ª–±–µ–∫–∞
func proccessRegistrationCallback(ctx context.Context, b *bot.Bot, update *models.Update) {

	params := &bot.SendMessageParams{
		ChatID:    update.CallbackQuery.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	if update.Message.Text == "üóÉ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" {
		full_tg_name := update.CallbackQuery.From.FirstName + " " + update.CallbackQuery.From.LastName
		db_answer_reg := regUser(update.CallbackQuery.From.ID, full_tg_name, update.CallbackQuery.From.Username)

		switch db_answer_reg {
		case db.DB_ANSWER_SUCCESS:
			params.Text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
			params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(false)

		case db.DB_ANSWER_OBJECT_EXISTS:
			params.Text = "–¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞) —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ" + "\n" +
				"–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª:"

			_, old_user := db.DB_GET_User_BY_UserTgID(update.Message.From.ID)

			if old_user.IsClubMember {
				params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsClubMember(old_user.IsSubscribeNewsletter)
			} else {
				params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(old_user.IsSubscribeNewsletter)
			}

		default:
			params.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î"
			rr_debug.PrintLOG("main.go", "update.Message.Text", "activity_GetObjects()", "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î", "")
		}
	} else {
		params.Text = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ" + "\n" +
			"–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å 152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª."
		params.ReplyMarkup = keyboards.Registration
	}

	_, err := b.SendMessage(ctx, params)
	if err != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessRegistration", "bot.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err.Error())
	}
}

//
//	–ö–æ–º–∞–Ω–¥—ã
//

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func BotHandler_Command_Start(ctx context.Context, b *bot.Bot, update *models.Update) {

	db_answer_code, user := db.DB_GET_User_BY_UserTgID(update.Message.From.ID)
	switch db_answer_code {
	case db.DB_ANSWER_SUCCESS:
		params := &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			ParseMode: models.ParseModeHTML,
		}

		var full_tg_name string

		full_tg_name = update.Message.From.FirstName + " " + update.Message.From.LastName

		params.Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å: " + full_tg_name + "\n" +
			"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

		if user.IsClubMember {
			params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsClubMember(user.IsSubscribeNewsletter)
		} else {
			params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(user.IsSubscribeNewsletter)
		}

		_, err := b.SendMessage(ctx, params)
		if err != nil {
			rr_debug.PrintLOG("botHandlers.go", "proccessCommand_Start", "bot.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err.Error())
		}
	case db.DB_ANSWER_OBJECT_NOT_FOUND:
		proccessRegistrationMessage(ctx, b, update)
	}
}

//
// –°–æ–æ–±—â–µ–Ω–∏—è
//

// –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–±
func proccessText_JoinClub(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {

	params_load := &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		ParseMode: models.ParseModeHTML,
	}

	params := &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		ParseMode: models.ParseModeHTML,
	}

	if current_user.IsSentRequest {
		params.Text = "–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–±. –û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞"

	} else {
		params_load.Text = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
		params.Text = "–ü–µ—Ä–µ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –∫–ª—É–±, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:" + "\n" + "\n" +
			"1. –£ –∫–ª—É–±–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–ø —á–ª–µ–Ω—Å—Ç–≤–∞ ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–∂–∏–≤–∞—Ç—å –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–Ω–∏–º–µ, –º–∞–Ω–≥–æ–π, —Ä–∞–Ω–æ–±—ç, JRPG, –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–≤–µ–ª–ª–∞–º–∏, –∫–æ—Å–ø–ª–µ–µ–º –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º–∏ –æ—Ç–∞–∫—É-–∫—É–ª—å—Ç—É—Ä—ã." + "\n" + "\n" +
			"–£–≤–∞–∂–∞–π –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –≤–∑–≥–ª—è–¥—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ó–∞ —Ä–∞–∑–∂–∏–≥–∞–Ω–∏–µ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –º–æ–∂–µ–º –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∫–ª—É–±–∞." + "\n" + "\n" +
			"2. –ü–æ—Å–µ—â–∞—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–ª—É–±–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî –≤—ã–±–∏—Ä–∞–π —Ç–µ, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥—è—Ç—Å—è —Ç–µ–±–µ –ø–æ –¥—É—à–µ. –ù–æ –µ—Å–ª–∏ –º—ã –Ω–µ –≤–∏–¥–µ–ª–∏ –∏ –Ω–µ —Å–ª—ã—à–∞–ª–∏ —Ç–µ–±—è –±–æ–ª–µ–µ 4 –º–µ—Å—è—Ü–µ–≤, —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–ª—É–±–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ, –Ω–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ —Å–≤—è–∂–µ–º—Å—è –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º. –í–µ—Ä–Ω—É—Ç—å—Å—è –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –Ω–µ –±–∞–Ω –∏ –Ω–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞—à —Å–ø–æ—Å–æ–± –¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –≤ –Ω—ë–º –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∫–ª—É–±—É –∏–ª–∏ –æ—Ç—á–∏—Å–ª–∏–ª–∏—Å—å –∏–∑ –ò–¢–ú–û." + "\n" + "\n" +
			"–ï—Å–ª–∏ —É—á–∞—Å—Ç–∏—é –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –º–µ—à–∞–ª–∞ —É—á—ë–±–∞ –∏–ª–∏ —Ä–∞–±–æ—Ç–∞ ‚Äî –∏–∑ –∫–ª—É–±–∞ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∞—à–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ú—ã —Ç–æ–∂–µ —Å—Ç—É–¥–µ–Ω—Ç—ã, –≤—Å—ë –ø–æ–Ω–∏–º–∞–µ–º."
		params_load.ReplyMarkup = keyboards.CommunicationManager
		params.ReplyMarkup = keyboards.CreateInlineKbd_JoinClub()

		_, err_msg_load := b.SendMessage(ctx, params_load)
		if err_msg_load != nil {
			rr_debug.PrintLOG("botHandlers.go", "proccessCommand_Unknown", "bot.SendMessage(params_load)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg_load.Error())
		}
	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessCommand_Unknown", "bot.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
func proccessText_SigningUpForActivity(ctx context.Context, b *bot.Bot, update *models.Update) {

	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	params_load := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	params_photo := &bot.SendPhotoParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	status_one := false
	var active_activities_list []db.Activity_ReadJSON

	activities_list := db.DB_GET_Activities()

	if len(activities_list) == 0 {
		params.Text = "–ù–∏–∫–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ"
		params.ReplyMarkup = keyboards.ListEvents

		_, err_msg := b.SendMessage(ctx, params)
		if err_msg != nil {
			rr_debug.PrintLOG("botHandlers.go", "proccessText_SigningUpForActivity", "bot.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
		}

	} else {

		for _, activity_load := range activities_list {
			if activity_load.Status {
				status_one = true
				break
			}
		}

		if !status_one {
			params.Text = "–ù–∏–∫–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è"
			params.ReplyMarkup = keyboards.ListEvents

			_, err_msg := b.SendMessage(ctx, params)
			if err_msg != nil {
				rr_debug.PrintLOG("botHandlers.go", "proccessText_SigningUpForActivity", "bot.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
			}
			return
		} else {
			params_load.Text = "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π..."
			params_load.ReplyMarkup = keyboards.ListEvents

			_, err_msg := b.SendMessage(ctx, params_load)
			if err_msg != nil {
				rr_debug.PrintLOG("botHandlers.go", "proccessText_SigningUpForActivity", "bot.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
			}

			directory := "./img/calendar_activities"
			// –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
			files, err_dir := os.ReadDir(directory)
			if err_dir != nil {
				rr_debug.PrintLOG("botHandlers.go", "proccessText_SigningUpForActivity", "os.ReadDir", "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", err_dir.Error())
			}

			fileInfo := files[0]
			filePath := filepath.Join(directory, fileInfo.Name())

			for _, activity := range activities_list {
				if activity.Status {
					active_activities_list = append(active_activities_list, activity)
				}
			}

			// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ - –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
			calendar_activities_path := filePath
			_, err := os.Stat(calendar_activities_path)
			if err == nil {

				// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
				file, err := os.Open(filePath)
				if err != nil {
					rr_debug.PrintLOG("botHandlers.go", "proccessText_SigningUpForActivity", "os.Open(filePath)", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", err.Error())
					return
				}
				defer file.Close()

				// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä InputFileUpload
				inputFile := &models.InputFileUpload{
					Filename: filepath.Base(filePath),
					Data:     file,
				}

				params_photo.Photo = inputFile
				params_photo.Caption = "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:"
				params_photo.ReplyMarkup = keyboards.CreateInlineKbd_ActivitiesList(active_activities_list)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
				_, err = b.SendPhoto(ctx, params_photo)
				if err != nil {
					rr_debug.PrintLOG("botHandlers.go", "proccessText_SigningUpForActivity", "b.SendPhoto(ctx, params_photo)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Ñ–∞–π–ª–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", err.Error())
					return
				}

			} else if os.IsNotExist(err) {
				params.Text = "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:"
				params.ReplyMarkup = keyboards.CreateInlineKbd_ActivitiesList(active_activities_list)

				_, err_msg := b.SendMessage(ctx, params_load)
				if err_msg != nil {
					rr_debug.PrintLOG("botHandlers.go", "proccessText_SigningUpForActivity", "bot.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
				}
			} else {
				rr_debug.PrintLOG("botHandlers.go", "proccessText_SigningUpForActivity", "os.Stat", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", err.Error())
				params.Text = "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:"
				params.ReplyMarkup = keyboards.CreateInlineKbd_ActivitiesList(active_activities_list)

				_, err_msg := b.SendMessage(ctx, params_load)
				if err_msg != nil {
					rr_debug.PrintLOG("botHandlers.go", "proccessText_SigningUpForActivity", "bot.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
				}
			}
		}
	}
}

// –ü–∞—Ä—Ç–Ω—ë—Ä—ã
func proccessText_Partners(ctx context.Context, b *bot.Bot, update *models.Update) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	params.Text = "–°–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∞–∫—Ü–∏–π –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"
	params.ReplyMarkup = keyboards.CreateInlineKbd_PartnersList()

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_Partners", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
func proccessText_MyActivities(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	var active_activities_list []*db.Activity

	if len(current_user.MyActivities) == 0 {
		params.Text = "–¢—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
	} else {

		for _, activity := range current_user.MyActivities {
			if activity.Status {
				active_activities_list = append(active_activities_list, activity)
			}
		}

		params.Text = "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–∞–ø–∏—Å–∞–Ω(–∞)"
		params.ReplyMarkup = keyboards.CreateInlineKbd_MyActivitiesList(active_activities_list)
	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_MyActivities", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
func proccessText_SubscribeNewsletter(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = current_user.UserTgID
	update_user_data["is_subscribe_newsletter"] = true

	db.DB_UPDATE_User(update_user_data)

	params.Text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –±—ã–ª(–∞) –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É!"
	params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(true)
	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_SubscribeNewsletter", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
func proccessText_UnsubscribeNewsletter(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = current_user.UserTgID
	update_user_data["is_subscribe_newsletter"] = false
	db.DB_UPDATE_User(update_user_data)

	params.Text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –±—ã–ª(–∞) –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É!"
	params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(false)
	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_UnsubscribeNewsletter", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –°–≤—è–∑—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –∫–ª—É–±–∞
func proccessText_ContactClubManager(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = current_user.UserTgID
	update_user_data["step"] = config.STEP_MESSAGE_SUPPORT
	db.DB_UPDATE_User(update_user_data)

	params.Text = "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–¥–µ—Å—å, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –∏ –æ–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –∫–ª—É–±–∞"
	params.ReplyMarkup = keyboards.CreateKeyboard_Cancel("back")

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_ContactClubManager", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
func proccessText_BackMeinMenu(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	params.Text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

	if current_user.IsClubMember {
		params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsClubMember(current_user.IsSubscribeNewsletter)
	} else {
		params.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(current_user.IsSubscribeNewsletter)
	}

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = update.Message.From.ID
	update_user_data["step"] = config.STEP_DEFAULT
	db.DB_UPDATE_User(update_user_data)

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_BackMeinMenu", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –ü–æ–∫–∏–Ω—É—Ç—å –∫–ª—É–±
func proccessText_LeaveClub(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = current_user.UserTgID
	update_user_data["step"] = config.STEP_USER_LEAVES_CLUB
	db.DB_UPDATE_User(update_user_data)

	params.Text = "–í–≤–µ–¥–∏ –ø—Ä–∏—á–∏–Ω—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–ª—É–±–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
	params.ReplyMarkup = keyboards.CreateKeyboard_Cancel("skip")

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_LeaveClub", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –ê–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞
func processText_AnimeRoulette(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	is_participant := false

	db_answer_code, current_anime_roulette := db.DB_GET_AnimeRoulette_BY_Status(true)

	switch db_answer_code {
	case db.DB_ANSWER_SUCCESS:
		params.Text = "–ú–µ–Ω—é —Ä—É–ª–µ—Ç–∫–∏"

		switch current_anime_roulette.CurrentStage {
		case config.ANIME_RUOLETTE_STAGE_START_REGISTRATION:
			for _, participant := range current_anime_roulette.Participants {
				if current_user.UserTgID == participant.UserTgID {
					is_participant = true
					break
				}
			}

		default:
			for _, participant := range current_anime_roulette.Participants {
				if current_user.UserTgID == participant.UserTgID {
					is_participant = true
					break
				}
			}

		}
		params.ReplyMarkup = keyboards.CreateKeyboard_AnimeRouletteMenu(is_participant)

	case db.DB_ANSWER_OBJECT_NOT_FOUND:
		params.Text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è"
	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "processText_AnimeRoulette", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫–µ
func processText_AnimeRoulette_Participate(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	is_participant := false

	db_answer_code, current_anime_roulette := db.DB_GET_AnimeRoulette_BY_Status(true)
	switch db_answer_code {
	case db.DB_ANSWER_SUCCESS:
		switch current_anime_roulette.CurrentStage {
		case config.ANIME_RUOLETTE_STAGE_START_REGISTRATION:
			for _, participant := range current_anime_roulette.Participants {
				if current_user.UserTgID == participant.UserTgID {
					is_participant = true
					break
				}
			}

			if is_participant {
				params.Text = "–¢—ã —É–∂–µ —è–≤–ª—è–µ—à—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∏"

			} else {
				db.DB_UPDATE_AnimeRoulette_ADD_Participants(current_user.ID)
				params.Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫—É! –ñ–¥–∏, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è —Ç–µ–º–∞ –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∏"
			}

			params.ReplyMarkup = keyboards.CreateKeyboard_AnimeRouletteStart(is_participant)

		default:
			for _, participant := range current_anime_roulette.Participants {
				if current_user.UserTgID == participant.UserTgID {
					is_participant = true
					break
				}
			}

			if is_participant {
				params.Text = "–¢—ã —É–∂–µ —è–≤–ª—è–µ—à—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∏"
				params.ReplyMarkup = keyboards.CreateKeyboard_AnimeRouletteStart(is_participant)
			} else {
				params.Text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞–±–æ—Ä —É—á–∞—Å–Ω–∏–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫—É –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑."
			}
		}

	case db.DB_ANSWER_OBJECT_NOT_FOUND:
		params.Text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è"
	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "processText_AnimeRoulette_Participate", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –ü–æ–∫–∏–Ω—É—Ç—å —Ä—É–ª–µ—Ç–∫—É
func processText_AnimeRoulette_CancelParticipate(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	is_participant := false
	indexToRemove := -1

	db_answer_code, current_anime_roulette := db.DB_GET_AnimeRoulette_BY_Status(true)
	switch db_answer_code {
	case db.DB_ANSWER_SUCCESS:
		for i, participant := range current_anime_roulette.Participants {
			if current_user.UserTgID == participant.UserTgID {
				is_participant = true
				indexToRemove = i
				break
			}
		}

		if !is_participant {
			params.Text = "–¢—ã —É–∂–µ –ø–æ–∫–∏–Ω—É–ª –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫—É"
		} else {
			if indexToRemove != -1 {
				db.DB_UPDATE_AnimeRoulette_REMOVE_Participants(current_user.ID)
				params.Text = "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –Ω–∞—à—É –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫—É."
			}
		}

		params.ReplyMarkup = keyboards.CreateKeyboard_AnimeRouletteStart(is_participant)

	case db.DB_ANSWER_OBJECT_NOT_FOUND:
		params.Text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è"
	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "processText_AnimeRoulette_CancelParticipate", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –ó–∞–≥–∞–¥–∞—Ç—å –∞–Ω–∏–º–µ
func processText_AnimeRoulette_AnimeWish(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	is_participant := false

	db_answer_code, current_anime_roulette := db.DB_GET_AnimeRoulette_BY_Status(true)
	switch db_answer_code {
	case db.DB_ANSWER_SUCCESS:
		switch current_anime_roulette.CurrentStage {
		case config.ANIME_RUOLETTE_STAGE_START_REGISTRATION:
			params.Text = "–¢–µ–º–∞ –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω–∞. –ñ–¥–∏—Ç–µ."

		case config.ANIME_RUOLETTE_STAGE_ANIME_GATHERING:

			for _, participant := range current_anime_roulette.Participants {
				if current_user.UserTgID == participant.UserTgID {
					is_participant = true
					break
				}
			}

			if is_participant {
				update_user_data := make(map[string]interface{})
				update_user_data["user_tg_id"] = update.Message.From.ID
				update_user_data["step"] = config.STEP_ANIME_RUOLETTE_ENTER_ENIGMATIC_TITLE
				db.DB_UPDATE_User(update_user_data)

				params.Text = "–í–≤–µ–¥–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥–∞–¥–∞—Ç—å"
				params.ReplyMarkup = keyboards.CreateKeyboard_Cancel("anime_roulette")
			} else {
				params.Text = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä—É–ª–µ—Ç–∫–∏."
			}

		case config.ANIME_RUOLETTE_STAGE_DATA_PROCESSING:
			params.Text = "–°–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –∞–Ω–∏–º–µ –∑–∞–∫–æ–Ω—á–µ–Ω."

		}

	case db.DB_ANSWER_OBJECT_NOT_FOUND:
		params.Text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è"
	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "processText_AnimeRoulette_AnimeWish", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –ú–æ–π —Å–ø–∏—Å–æ–∫
func proccessText_AnimeRoulette_LinkMyList(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	is_participant := false

	db_answer_code, current_anime_roulette := db.DB_GET_AnimeRoulette_BY_Status(true)
	switch db_answer_code {
	case db.DB_ANSWER_SUCCESS:

		for _, participant := range current_anime_roulette.Participants {
			if current_user.UserTgID == participant.UserTgID {
				is_participant = true
				break
			}
		}

		if is_participant {
			update_user_data := make(map[string]interface{})
			update_user_data["user_tg_id"] = update.Message.From.ID
			update_user_data["step"] = config.STEP_ANIME_RUOLETTE_ENTER_LINK_MY_ANIME_LIST
			db.DB_UPDATE_User(update_user_data)

			if current_user.LinkMyAnimeList == "" {
				params.Text = "–í–≤–µ–¥–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å"
			} else {
				params.Text = "–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ: " + current_user.LinkMyAnimeList + "\n" +
					"–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å? –¢–æ–≥–¥–∞ —É–∫–∞–∂–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ"

				params.ReplyMarkup = keyboards.CreateKeyboard_Cancel("anime_roulette")
			}

		} else {
			params.Text = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä—É–ª–µ—Ç–∫–∏."
			params.ReplyMarkup = keyboards.CreateKeyboard_Cancel("anime_roulette")
		}

	case db.DB_ANSWER_OBJECT_NOT_FOUND:
		params.Text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è"

	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_AnimeRoulette_LinkMyList", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –ü—Ä–∞–≤–∏–ª–∞
func proccessText_AnimeRoulette_Rules(ctx context.Context, b *bot.Bot, update *models.Update) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
		LinkPreviewOptions: &models.LinkPreviewOptions{
			IsDisabled: func(b bool) *bool { return &b }(true),
		},
	}

	params.Text = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä—É–ª–µ—Ç–∫–∏ –∑–∞–≥–∞–¥—ã–≤–∞—é—Ç –∞–Ω–∏–º–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–æ–ª—É—á–∞—é—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ, —á—Ç–æ –∑–∞–≥–∞–¥–∞–ª –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫." + "\n" + "\n" +
		"–ó–∞–≥–∞–¥—ã–≤–∞–µ–º—ã–π —Ç–∞–π—Ç–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–µ—Ä–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–≤—à–∏–π –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–≥ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –Ω–µ–¥–µ–ª—å." + "\n" +
		"–ù–µ–ª—å–∑—è –∑–∞–≥–∞–¥—ã–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã (–±–æ–ª–µ–µ 80 —Å–µ—Ä–∏–π –∏–ª–∏ 5 –¢–í-—Å–µ–∑–æ–Ω–æ–≤), —Ö–µ–Ω—Ç–∞–π –∏ –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –≤ –†–§ —Ç–∞–π—Ç–ª—ã." + "\n" +
		"1 —Å–µ—Ä–∏—è = 24 –º–∏–Ω—É—Ç—ã." + "\n" + "\n" +
		"–ï—Å–ª–∏ —É–∂–µ –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–π —Ç–∞–π—Ç–ª –≤—ã —Å–º–æ—Ç—Ä–µ–ª–∏, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∑–∞–º–µ–Ω—É." + "\n" + "\n" +
		"–¶–µ–ª—å —Ä—É–ª–µ—Ç–∫–∏: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ –∞–Ω–∏–º–µ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏: https://vk.com/topic-91030630_40877814." + "\n" +
		"–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ –±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É, –∏–Ω–∞—á–µ –æ—Ç–∑—ã–≤ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç—Å—è." + "\n" +
		"–ó–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ —Å–ª–µ–¥—É–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–µ. –ò –ø–æ–≤–µ—Ä—å, –ª—É—á—à–µ –¥–æ –Ω–µ–≥–æ –Ω–µ –¥–æ–≤–æ–¥–∏—Ç—å: –∫—Ç–æ –∑–Ω–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —ç—Ç–æ—Ç —Ä–∞–∑?"

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_AnimeRoulette_Rules", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –¢–µ–º–∞ —Ä—É–ª–µ—Ç–∫–∏
func proccessText_AnimeRoulette_MainTheme(ctx context.Context, b *bot.Bot, update *models.Update) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	db_answer_code, current_anime_roulette := db.DB_GET_AnimeRoulette_BY_Status(true)
	switch db_answer_code {
	case db.DB_ANSWER_SUCCESS:
		switch current_anime_roulette.CurrentStage {
		case config.ANIME_RUOLETTE_STAGE_START_REGISTRATION:
			params.Text = "–¢–µ–º–∞ –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω–∞. –ñ–¥–∏—Ç–µ."

		case config.ANIME_RUOLETTE_STAGE_ANIME_GATHERING:
			if current_anime_roulette.Theme == "" {
				params.Text = "–¢–µ–º—É –≤–æ—Ç –≤–æ—Ç –æ–±—ä—è–≤—è—Ç"
			} else {
				params.Text = current_anime_roulette.Theme
			}

		case config.ANIME_RUOLETTE_STAGE_DATA_PROCESSING:
			params.Text = "–°–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –∞–Ω–∏–º–µ –∑–∞–∫–æ–Ω—á–µ–Ω."

		default:
			params.Text = "–ê–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞. –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑"
		}

	case db.DB_ANSWER_OBJECT_NOT_FOUND:
		params.Text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è"
	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_AnimeRoulette_MainTheme", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
func proccessText_InDevelopment(ctx context.Context, b *bot.Bot, update *models.Update) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	params.Text = "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_InDevelopment", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

//
// –®–∞–≥–∏
//

// –®–∞–≥ - –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –∫–ª—É–±–∞
func proccessStep_ContactClubManager(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {

	params_support := &bot.SendMessageParams{
		ChatID:    config.GetConfig().CONFIG_ID_CHAT_SUPPORT,
		ParseMode: models.ParseModeHTML,
		LinkPreviewOptions: &models.LinkPreviewOptions{
			IsDisabled: func(b bool) *bool { return &b }(true),
		},
	}

	params_user := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = current_user.UserTgID
	update_user_data["step"] = config.STEP_DEFAULT
	db.DB_UPDATE_User(update_user_data)

	reference_number := generateRandomNumber(10)
	reference_number_str := strconv.Itoa(reference_number)

	params_user.Text = "–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –∫–ª—É–±–∞." + "\n" +
		"–ù–æ–º–µ—Ä —Ç–≤–æ–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è: " + reference_number_str

	params_user.ReplyMarkup = keyboards.CreateKeyboard_Cancel("back")

	user_name := update.Message.From.FirstName + " " + update.Message.From.LastName
	profileURL := fmt.Sprintf("https://t.me/%s", update.Message.From.Username)

	user_tg_id_str := strconv.FormatInt(update.Message.From.ID, 10)

	params_support.Text = "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: " + user_name + "\n" +
		"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: " + profileURL + "\n" +
		"<b>–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è</b>: " + update.Message.Text + "\n" +
		"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞</b>: " + config.GetConfig().CONFIG_URL_BASE + "support-response/?user_tg_id=" + user_tg_id_str + "&reference_number=" + reference_number_str

	_, err_msg := b.SendMessage(ctx, params_support)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_ContactClubManager", "b.SendMessage(ctx, params_support)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}

	_, err_msg = b.SendMessage(ctx, params_user)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_ContactClubManager", "b.SendMessage(ctx, params_user)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –®–∞–≥ - –ß–µ–ª–æ–≤–µ–∫ –∏–∑ –ò–¢–ú–û –≤–≤–æ–¥–∏—Ç –ò–°–£
func proccessStep_ITMO_EnterISU(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON, action string) {

	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	if _, err := strconv.Atoi(update.Message.Text); err == nil {

		update_user_data := make(map[string]interface{})
		update_user_data["user_tg_id"] = current_user.UserTgID
		update_user_data["isu"] = update.Message.Text

		if action == "join_club" {
			update_user_data["step"] = config.STEP_ITMO_ENTER_FULLNAME
		} else {
			update_user_data["step"] = config.STEP_APPOINTMENT_ITMO_ENTER_FULLNAME
		}

		db.DB_UPDATE_User(update_user_data)

		params.Text = "–í–≤–µ–¥–∏ —Å–≤–æ–∏ –§–ò–û"
	} else {
		params.Text = "–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –ò–°–£ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–æ–º–µ—Ä –ò–°–£ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏–ª–∏ –∏–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã." + "\n" +
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_ITMO_EnterISU", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –®–∞–≥ - –ß–µ–ª–æ–≤–µ–∫ –∏–∑ –ò–¢–ú–û –≤–≤–æ–¥–∏—Ç –§–ò–û
func proccessStep_ITMO_EnterFullName(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON, action string) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = update.Message.From.ID
	update_user_data["full_name"] = update.Message.Text

	if action == "join_club" {
		params.Text = "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–¥ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ" + "\n" +
			"–ï—Å–ª–∏ –∫–æ–¥–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å —Ü–∏—Ñ—Ä—É '0'"

		update_user_data["step"] = config.STEP_ITMO_ENTER_SECRET_CODE

	} else {
		update_user_data["step"] = config.STEP_DEFAULT
		update_user_data["is_itmo"] = true
		update_user_data["is_filled_data"] = true

		db_answer_code, activity := db.DB_GET_Activity_BY_ID(uint(current_user.TempActivityID))

		switch db_answer_code {
		case db.DB_ANSWER_SUCCESS:

			db.DB_UPDATE_Activity_ADD_Participants(activity.ID, current_user.ID)

			params.Text = "–ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: " + activity.Title + " –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
			params.ReplyMarkup = keyboards.ListEvents
		}
	}

	db.DB_UPDATE_User(update_user_data)

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_ITMO_EnterFullName", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –®–∞–≥ - –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –∏–∑ –ò–¢–ú–û –≤–≤–æ–¥–∏—Ç –§–ò–û
func proccessStep_NoITMO_EnterFullName(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON, action string) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	params.Text = "–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞" + "\n" +
		"–û–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ—Ö–æ–¥—è—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–ª—É–±–∞"

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = current_user.UserTgID
	update_user_data["full_name"] = update.Message.Text

	if action == "join_club" {
		update_user_data["step"] = config.STEP_NOITMO_ENTER_PHONE
	} else {
		update_user_data["step"] = config.STEP_APPOINTMENT_NOITMO_ENTER_PHONE
	}

	db.DB_UPDATE_User(update_user_data)

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_NoITMO_EnterFullName", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –®–∞–≥ - –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –∏–∑ –ò–¢–ú–û –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
func proccessStep_NoITMO_EnterPhoneNumber(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON, action string) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = update.Message.From.ID

	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞
	regex := regexp.MustCompile(`^(?:\+7|8)\d{10}$`)

	if regex.MatchString(update.Message.Text) {
		update_user_data["phone_number"] = update.Message.Text

		if action == "join_club" {
			params.Text = "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–¥ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ" + "\n" +
				"–ï—Å–ª–∏ –∫–æ–¥–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å —Ü–∏—Ñ—Ä—É '0'"

			update_user_data["step"] = config.STEP_NOITMO_ENTER_SECRET_CODE
		} else {
			update_user_data["step"] = config.STEP_DEFAULT
			update_user_data["is_itmo"] = false
			update_user_data["is_filled_data"] = true

			db_answer_code, activity := db.DB_GET_Activity_BY_ID(uint(current_user.TempActivityID))
			switch db_answer_code {
			case db.DB_ANSWER_SUCCESS:

				db.DB_UPDATE_Activity_ADD_Participants(activity.ID, current_user.ID)

				params.Text = "–ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: " + activity.Title + " –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
				params.ReplyMarkup = keyboards.ListEvents
			}
		}

		db.DB_UPDATE_User(update_user_data)

	} else {
		params.Text = "–ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" + "\n" +
			"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ –∏ 10 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞" + "\n" + "\n" +
			"–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â—ë —Ä–∞–∑"
	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_NoITMO_EnterPhoneNumber", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –®–∞–≥ - —á–µ–ª–æ–≤–µ–∫ –≤–≤–æ–¥–∏—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
func proccessStep_EnterSecretCode(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON, status string) {

	params_user := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	params_support := &bot.SendMessageParams{
		ChatID:    config.GetConfig().CONFIG_ID_CHAT_SUPPORT,
		ParseMode: models.ParseModeHTML,
	}

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = update.Message.From.ID
	update_user_data["secret_code"] = update.Message.Text

	update_user_data["step"] = config.STEP_DEFAULT
	update_user_data["is_sent_request"] = true
	update_user_data["is_filled_data"] = true

	if status == "itmo" {
		update_user_data["is_itmo"] = true
	} else {
		update_user_data["is_itmo"] = false
	}

	db.DB_UPDATE_User(update_user_data)

	db_answer_code := db.DB_CREATE_Request(current_user.ID)
	switch db_answer_code {
	case db.DB_ANSWER_SUCCESS:
		params_user.Text = "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–± –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!" + "\n" +
			"–û–∂–∏–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ ‚Äî –æ–Ω —É–≤–µ–¥–æ–º–∏—Ç –æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏"

		params_support.Text = "–ö –Ω–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–± –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + current_user.FullName
		_, err_msg := b.SendMessage(ctx, params_support)
		if err_msg != nil {
			rr_debug.PrintLOG("botHandlers.go", "proccessStep_EnterSecretCode", "b.SendMessage(ctx, params_support)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
		}

	default:
		params_user.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–ª—É–±." + "\n" +
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏c—å —Å –Ω–∞–º–∏ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–∞–º –æ –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ."
	}

	params_user.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(current_user.IsSubscribeNewsletter)

	_, err_msg := b.SendMessage(ctx, params_user)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_EnterSecretCode", "b.SendMessage(ctx, params_user)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –®–∞–≥ - —á–µ–ª–æ–≤–µ–∫ –º–µ–Ω—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
func proccessStep_ChangePhoneNumber(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞
	regex := regexp.MustCompile(`^(?:\+7|8)\d{10}$`)

	if regex.MatchString(update.Message.Text) {

		update_user_data := make(map[string]interface{})
		update_user_data["user_tg_id"] = update.Message.From.ID
		update_user_data["phone_number"] = update.Message.Text

		db_answer_code, activity := db.DB_GET_Activity_BY_ID(uint(current_user.TempActivityID))
		switch db_answer_code {
		case db.DB_ANSWER_SUCCESS:

			db.DB_UPDATE_Activity_ADD_Participants(activity.ID, current_user.ID)

			params.Text = "–¢–≤–æ–π –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!" + "\n" +
				"–ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: " + activity.Title + " –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
			params.ReplyMarkup = keyboards.ListEvents
		}

		db.DB_UPDATE_User(update_user_data)

	} else {
		params.Text = "–ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" + "\n" +
			"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ –∏ 10 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞" + "\n" + "\n" +
			"–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â—ë —Ä–∞–∑"
	}

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_ChangePhoneNumber", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –®–∞–≥ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç –∫–ª—É–±
func proccessStep_LeavesClub(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {

	params_user := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	params_support := &bot.SendMessageParams{
		ChatID:    config.GetConfig().CONFIG_ID_CHAT_SUPPORT,
		ParseMode: models.ParseModeHTML,
		LinkPreviewOptions: &models.LinkPreviewOptions{
			IsDisabled: func(b bool) *bool { return &b }(true),
		},
	}

	var user_isu_text string

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = update.Message.From.ID

	switch update.Message.Text {
	case "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		update_user_data["is_club_member"] = false
		update_user_data["is_sent_request"] = false

		if current_user.ISU == "" {
			user_isu_text = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑ –ò–¢–ú–û"
		}

		params_support.Text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + current_user.FullName + " –ø–æ–∫–∏–Ω—É–ª –Ω–∞—à –∫–ª—É–±" + "\n" +
			"–ò–°–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user_isu_text + "\n" +
			"–°—Å—ã–ª–∫–∞ –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º–º: https://t.me/" + current_user.UserName + "\n" +
			"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

		params_user.Text = "–¢—ã –ø–æ–∫–∏–Ω—É–ª –Ω–∞—à –∫–ª—É–±"
		params_user.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(current_user.IsSubscribeNewsletter)

		db.DB_UPDATE_User(update_user_data)

		_, err_msg := b.SendMessage(ctx, params_support)
		if err_msg != nil {
			rr_debug.PrintLOG("botHandlers.go", "proccessStep_LeavesClub", "b.SendMessage(ctx, params_support)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
		}

	case "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
		params_user.Text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
		params_user.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(current_user.IsSubscribeNewsletter)

	default:
		update_user_data["is_club_member"] = false
		update_user_data["is_sent_request"] = false

		if current_user.ISU == "" {
			user_isu_text = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑ –ò–¢–ú–û"
		}

		params_support.Text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + current_user.FullName + " –ø–æ–∫–∏–Ω—É–ª –Ω–∞—à –∫–ª—É–±" + "\n" +
			"–ò–°–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user_isu_text + "\n" +
			"–°—Å—ã–ª–∫–∞ –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º–º: https://t.me/" + current_user.UserName + "\n" +
			"–ü—Ä–∏—á–∏–Ω–∞: " + update.Message.Text

		params_user.Text = "–¢—ã –ø–æ–∫–∏–Ω—É–ª –Ω–∞—à –∫–ª—É–±"
		params_user.ReplyMarkup = keyboards.CreateKeyboard_MainMenuButtonsDefault(current_user.IsSubscribeNewsletter)

		db.DB_UPDATE_User(update_user_data)

		_, err_msg := b.SendMessage(ctx, params_support)
		if err_msg != nil {
			rr_debug.PrintLOG("botHandlers.go", "proccessStep_LeavesClub", "b.SendMessage(ctx, params_support)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
		}
	}

	_, err_msg := b.SendMessage(ctx, params_user)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_LeavesClub", "b.SendMessage(ctx, params_user)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

// –®–∞–≥ - –∑–∞–≥–∞–¥—ã–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ
func proccessStep_AnimeRoulette_EnterEnigmaticTitle(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	is_participant := false

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = update.Message.From.ID

	db_answer_code, current_anime_roulette := db.DB_GET_AnimeRoulette_BY_Status(true)
	switch db_answer_code {
	case db.DB_ANSWER_SUCCESS:
		switch current_anime_roulette.CurrentStage {
		case config.ANIME_RUOLETTE_STAGE_START_REGISTRATION:
			params.Text = "–¢–µ–º–∞ –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω–∞. –ñ–¥–∏—Ç–µ."

		case config.ANIME_RUOLETTE_STAGE_ANIME_GATHERING:
			for _, participant := range current_anime_roulette.Participants {
				if current_user.UserTgID == participant.UserTgID {
					is_participant = true
					update_user_data["enigmatic_title"] = update.Message.Text
					break
				}
			}

			if is_participant {
				db.DB_UPDATE_User(update_user_data)
				params.Text = "–ê–Ω–∏–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥–∞–¥–∞–Ω–æ! –û—Ç–ª–∏—á–Ω–æ!"

			} else {
				params.Text = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä—É–ª–µ—Ç–∫–∏."
			}

		case config.ANIME_RUOLETTE_STAGE_DATA_PROCESSING:
			params.Text = "–°–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –∞–Ω–∏–º–µ –∑–∞–∫–æ–Ω—á–µ–Ω."

		}

	case db.DB_ANSWER_OBJECT_NOT_FOUND:
		params.Text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è"
	}

	update_user_data["step"] = config.STEP_DEFAULT
	db.DB_UPDATE_User(update_user_data)

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_AnimeRoulette_EnterEnigmaticTitle", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}

	processText_AnimeRoulette(ctx, b, update, current_user)
}

// –®–∞–≥ - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ
func proccessStep_AnimeRoulette_EnterLinkMyAnimeList(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	is_participant := false

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = update.Message.From.ID

	db_answer_code, current_anime_roulette := db.DB_GET_AnimeRoulette_BY_Status(true)

	switch db_answer_code {
	case db.DB_ANSWER_SUCCESS:
		for _, participant := range current_anime_roulette.Participants {
			if current_user.UserTgID == participant.UserTgID {
				is_participant = true
				update_user_data["link_my_anime_list"] = update.Message.From.ID
				break
			}
		}

		if is_participant {
			db.DB_UPDATE_User(update_user_data)
			params.Text = "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞! –û—Ç–ª–∏—á–Ω–æ!"

		} else {
			params.Text = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä—É–ª–µ—Ç–∫–∏."
		}

	case db.DB_ANSWER_OBJECT_NOT_FOUND:
		params.Text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è"
	}

	update_user_data["step"] = config.STEP_DEFAULT
	db.DB_UPDATE_User(update_user_data)

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessStep_AnimeRoulette_EnterLinkMyAnimeList", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}

	processText_AnimeRoulette(ctx, b, update, current_user)
}

// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —à–∞–≥
func proccessText_Unknown(ctx context.Context, b *bot.Bot, update *models.Update) {
	params := &bot.SendMessageParams{
		ChatID:    update.Message.From.ID,
		ParseMode: models.ParseModeHTML,
	}

	params.Text = "–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∫–æ—Ç–æ—Ä—É—é —è –Ω–µ –∑–Ω–∞—é? –ò–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø–æ–Ω–∏–º–∞—é?" + "\n" +
		"–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é - —è, –±–æ—Ç, –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∏—Ö." + "\n" +
		"–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏ /start"

	_, err_msg := b.SendMessage(ctx, params)
	if err_msg != nil {
		rr_debug.PrintLOG("botHandlers.go", "proccessText_Unknown", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
	}
}

//
// Inline - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
//

// –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–± - –∫–ª–∞–≤–∏—à–∏ "–∏–∑ –ò–¢–ú–û", "–Ω–µ –∏–∑ –ò–¢–ú–û"
func BotHandler_CallbackQuery(ctx context.Context, b *bot.Bot, update *models.Update, current_user *db.User_ReadJSON) {

	var (
		parts []string
		data  string
	)

	update_user_data := make(map[string]interface{})
	update_user_data["user_tg_id"] = update.CallbackQuery.From.ID

	switch {

	// –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–±
	case strings.HasPrefix(update.CallbackQuery.Data, "JOIN_CLUB"):

		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			ShowAlert:       false,
		})

		params := &bot.SendMessageParams{
			ChatID:    update.CallbackQuery.From.ID,
			ParseMode: models.ParseModeHTML,
		}

		parts = strings.Split(update.CallbackQuery.Data, "::")
		data = parts[1]

		if data == "from_ITMO" {
			update_user_data["step"] = config.STEP_ITMO_ENTER_ISU
			db.DB_UPDATE_User(update_user_data)

			params.Text = "–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä –ò–°–£"
		} else {
			update_user_data["step"] = config.STEP_NOITMO_ENTER_FULLNAME
			db.DB_UPDATE_User(update_user_data)

			params.Text = "–í–≤–µ–¥–∏ —Å–≤–æ–∏ –§–ò–û"
		}

		_, err_msg := b.SendMessage(ctx, params)
		if err_msg != nil {
			rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_JOIN_CLUB", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
		}

	// –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
	case strings.HasPrefix(update.CallbackQuery.Data, "PARTNERS"):
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			ShowAlert:       false,
		})

		params := &bot.SendMessageParams{
			ChatID:    update.CallbackQuery.From.ID,
			ParseMode: models.ParseModeHTML,
		}

		params_photo := &bot.SendPhotoParams{
			ChatID:    update.CallbackQuery.From.ID,
			ParseMode: models.ParseModeHTML,
		}

		parts = strings.Split(update.CallbackQuery.Data, "::")
		data = parts[1]

		switch data {
		case "cafeTaiyaki":
			last_name, first_name, paternity := splitName(current_user.FullName)
			user_tg_id_str := strconv.FormatInt(update.CallbackQuery.From.ID, 10)
			output_image_path := gen_certs.GenCerts(last_name, first_name, paternity, "./img/templates/taiyaki.png", user_tg_id_str)

			// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
			file, err := os.Open(output_image_path)
			if err != nil {
				rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_PARTNERS", "os.Open(output_image_path)", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞", err.Error())
				return
			}
			defer file.Close()

			// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä InputFileUpload
			inputFile := &models.InputFileUpload{
				Filename: filepath.Base(output_image_path),
				Data:     file,
			}

			params_photo.Photo = inputFile

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
			_, err = b.SendPhoto(ctx, params_photo)
			if err != nil {
				rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_PARTNERS", "b.SendPhoto(ctx, params_photo)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ", err.Error())
				return
			}

		case "gemfest":
			output_image_path := config.FILE_PHOTO_GEMFEST_PATH
			// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
			file, err := os.Open(output_image_path)
			if err != nil {
				rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_PARTNERS", "os.Open(output_image_path)", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞", err.Error())
				return
			}
			defer file.Close()

			// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä InputFileUpload
			inputFile := &models.InputFileUpload{
				Filename: filepath.Base(output_image_path),
				Data:     file,
			}

			params_photo.Photo = inputFile
			params_photo.Caption = "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ –Ω–æ–≤—ã–π –º—É–ª—å—Ç–∏—Ñ–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–∏–º–µ-—Ñ–µ—Å—Ç–∏–≤–∞–ª—å –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ https://vk.com/gemfestspb!" + "\n" +
				"–û–Ω –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω –•—ç–ª–ª–æ—É–∏–Ω—É, –∞ –∏–º–µ–Ω–Ω–æ ‚Äî —Ç–µ–º–µ –ö–æ–≤–µ–Ω–∞." + "\n" + "\n" +
				"‚Äî 11 –Ω–æ—è–±—Ä—è —Å 12:00" + "\n" +
				"‚Äî –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –î–æ–º –º–æ–ª–æ–¥–µ–∂–∏, –ù–æ–≤–æ–∏–∑–º–∞–π–ª–æ–≤—Å–∫–∏–π –ø—Ä. 48" + "\n" + "\n" +
				"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–ª—É–±–∞ ‚Äî –°–ö–ò–î–ö–ê –Ω–∞ –ª—é–±–æ–π –∏–∑ –≤–∏–¥–æ–≤ –±–∏–ª–µ—Ç–æ–≤ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É ITMOGEM23 –¥–æ –∫–æ–Ω—Ü–∞ –æ–∫—Ç—è–±—Ä—è!" + "\n" + "\n" +
				"–ü–æ—Ä–∞ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ —à–∫–∞—Ñ–æ–≤ –≤—Å–µ —Å–∞–º—ã–µ –∂—É—Ç–∫–∏–µ –Ω–∞—Ä—è–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞–≤—Å—Ç—Ä–µ—á—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!" + "\n" + "\n" +
				"üé´ –£–≤–∏–¥–∏–º—Å—è –Ω–∞ –§–µ—Å—Ç–∏–≤–∞–ª–µ!: https://spb.qtickets.events/83613-gemfest-multifandomnyy-festival"

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
			_, err = b.SendPhoto(ctx, params_photo)
			if err != nil {
				rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_PARTNERS", "b.SendPhoto(ctx, params_photo)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ", err.Error())
				return
			}

		case "back":
			params.Text = "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
			_, err_msg := b.SendMessage(ctx, params)
			if err_msg != nil {
				rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_PARTNERS", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
			}
		}

	// –ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–¥–ª—è –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª—É–±–∞)
	case strings.HasPrefix(update.CallbackQuery.Data, "APPOINTMENT"):
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			ShowAlert:       false,
		})

		params := &bot.SendMessageParams{
			ChatID:    update.CallbackQuery.From.ID,
			ParseMode: models.ParseModeHTML,
		}

		parts = strings.Split(update.CallbackQuery.Data, "::")
		data = parts[1]

		if data == "from_ITMO" {
			update_user_data["step"] = config.STEP_APPOINTMENT_ITMO_ENTER_ISU
			db.DB_UPDATE_User(update_user_data)

			params.Text = "–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä –ò–°–£"
		} else {
			update_user_data["step"] = config.STEP_APPOINTMENT_NOITMO_ENTER_FULLNAME
			db.DB_UPDATE_User(update_user_data)

			params.Text = "–í–≤–µ–¥–∏ —Å–≤–æ–∏ –§–ò–û"
		}

		_, err_msg := b.SendMessage(ctx, params)
		if err_msg != nil {
			rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_APPOINTMENT", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
		}

	// –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
	case strings.HasPrefix(update.CallbackQuery.Data, "ACTIVITIES"), strings.HasPrefix(update.CallbackQuery.Data, "MY_ACTIVITIES"):

		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			ShowAlert:       false,
		})

		var media_group []models.InputMedia

		params := &bot.SendMessageParams{
			ChatID:    update.CallbackQuery.From.ID,
			ParseMode: models.ParseModeHTML,
			LinkPreviewOptions: &models.LinkPreviewOptions{
				IsDisabled: func(b bool) *bool { return &b }(true),
			},
		}

		params_photos := &bot.SendMediaGroupParams{
			ChatID: update.CallbackQuery.From.ID,
		}

		parts = strings.Split(update.CallbackQuery.Data, "::")
		data = parts[1]

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ uint
		activity_id, err := strconv.ParseUint(data, 10, 64)
		if err != nil {
			rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITIES", "strconv.ParseUint", "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤ uint", err.Error())
			return
		}

		db_answer_code, activity := db.DB_GET_Activity_BY_ID(uint(activity_id))
		switch db_answer_code {
		case db.DB_ANSWER_SUCCESS:
			var formattedTime string
			is_participant := false

			for _, participant := range activity.Participants {
				if participant.UserTgID == update.CallbackQuery.From.ID {
					is_participant = true
					break
				}
			}

			// –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º —á—á:–º–º
			format := "02.01 15:04"

			// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ Format –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
			formattedTime = activity.DateMeeting.Format(format)

			if len(activity.PathsImages) != 0 {
				for _, output_image_path := range activity.PathsImages {
					// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
					file, err := os.Open(output_image_path)
					if err != nil {
						rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITIES", "os.Open(output_image_path)", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞", err.Error())
						return
					}
					defer file.Close()

					// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –±–∞–π—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤
					fileData, err := io.ReadAll(file)
					if err != nil {
						rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITIES", "io.ReadAll", "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–∞–π–ª–∞ –≤ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç", err.Error())
						return
					}

					// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞
					media := &models.InputMediaPhoto{
						Media:           "attach://" + filepath.Base(output_image_path),
						ParseMode:       models.ParseModeHTML,
						MediaAttachment: bytes.NewReader(fileData),
					}

					media_group = append(media_group, media)
				}

				params_photos.Media = media_group

				params.Text = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: " + activity.Title + "\n" +
					"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> " + activity.Description + "\n" +
					"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: </b>" + formattedTime + "\n" +
					"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: </b>" + activity.Location

				if is_participant {
					params.ReplyMarkup = keyboards.CreateInlineKbd_UnsubscribeActivity(int(activity.ID))
				} else {
					params.ReplyMarkup = keyboards.CreateInlineKbd_SubscribeActivity(int(activity.ID))
				}

				_, err_media := b.SendMediaGroup(ctx, params_photos)
				if err_media != nil {
					rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITIES", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_media.Error())
				}

				_, err_msg := b.SendMessage(ctx, params)
				if err_msg != nil {
					rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITIES", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
				}
			} else {

				params.Text = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: " + activity.Title + "\n" +
					"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> " + activity.Description + "\n" +
					"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: </b>" + formattedTime + "\n" +
					"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: </b>" + activity.Location

				if is_participant {
					params.ReplyMarkup = keyboards.CreateInlineKbd_UnsubscribeActivity(int(activity.ID))
				} else {
					params.ReplyMarkup = keyboards.CreateInlineKbd_SubscribeActivity(int(activity.ID))
				}

				_, err_msg := b.SendMessage(ctx, params)
				if err_msg != nil {
					rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITIES", "b.SendMessage", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
				}
			}
		}

	// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
	case strings.HasPrefix(update.CallbackQuery.Data, "ACTIVITY_SUBSCRIBE"):
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			ShowAlert:       false,
		})

		params := &bot.SendMessageParams{
			ChatID:    update.CallbackQuery.From.ID,
			ParseMode: models.ParseModeHTML,
		}

		params_load := &bot.SendMessageParams{
			ChatID:    update.CallbackQuery.From.ID,
			ParseMode: models.ParseModeHTML,
		}

		parts = strings.Split(update.CallbackQuery.Data, "::")
		data = parts[1]

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ uint
		activity_id, err := strconv.ParseUint(data, 10, 64)
		if err != nil {
			rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITY_SUBSCRIBE", "strconv.ParseUint", "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤ uint", err.Error())
			return
		}

		if current_user.IsFilledData {
			if current_user.IsITMO {
				db_answer_code, activity := db.DB_GET_Activity_BY_ID(uint(activity_id))
				switch db_answer_code {
				case db.DB_ANSWER_SUCCESS:
					db.DB_UPDATE_Activity_ADD_Participants(uint(activity_id), current_user.ID)
					params_load.Text = "–ó–∞–≥—Ä—É–∑–∫–∞..."
					params.Text = "–ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: " + activity.Title + " –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
					params.ReplyMarkup = keyboards.ListEvents
				}
			} else {
				params_load.Text = "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."
				params.Text = "–¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ " + current_user.PhoneNumber + " —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º?"
				params_load.ReplyMarkup = keyboards.CreateKeyboard_Cancel("back")
				params.ReplyMarkup = keyboards.CreateInlineKbd_RelevancePhoneNumber()
			}
		} else {
			params_load.Text = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
			params.Text = "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –Ω–∞–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"

			params_load.ReplyMarkup = keyboards.CreateKeyboard_Cancel("back")
			params.ReplyMarkup = keyboards.CreateInlineKbd_Appointment()
		}

		_, err_msg_load := b.SendMessage(ctx, params_load)
		if err_msg_load != nil {
			rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITY_SUBSCRIBE", "b.SendMessage(ctx, params_load)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg_load.Error())
		}

		_, err_msg := b.SendMessage(ctx, params)
		if err_msg != nil {
			rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITY_SUBSCRIBE", "b.SendMessage(ctx, params)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
		}

	// –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
	case strings.HasPrefix(update.CallbackQuery.Data, "ACTIVITY_UNSUBSCRIBE"):
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			ShowAlert:       false,
		})

		params := &bot.SendMessageParams{
			ChatID:    update.CallbackQuery.From.ID,
			ParseMode: models.ParseModeHTML,
		}

		parts = strings.Split(update.CallbackQuery.Data, "::")
		data = parts[1]

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ uint
		activity_id, err := strconv.ParseUint(data, 10, 64)
		if err != nil {
			rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITY_SUBSCRIBE", "strconv.ParseUint", "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤ uint", err.Error())
			return
		}

		db_answer_code, activity := db.DB_GET_Activity_BY_ID(uint(activity_id))
		switch db_answer_code {
		case db.DB_ANSWER_SUCCESS:
			db_answer_code_remove := db.DB_UPDATE_Activity_REMOVE_Participant(uint(activity_id), current_user.ID)
			switch db_answer_code_remove {
			case db.DB_ANSWER_SUCCESS:
				params.Text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è(–∞—Å—å) –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: " + activity.Title
				params.ReplyMarkup = keyboards.ListEvents

			case db.DB_ANSWER_OBJECT_NOT_FOUND:
				params.Text = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
				params.ReplyMarkup = keyboards.ListEvents

			case db.DB_ANSWER_OBJECT_EXISTS:
				params.Text = "–¢—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –±—ã–ª(–∞) –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: " + activity.Title
				params.ReplyMarkup = keyboards.ListEvents

			}
		}

		_, err_msg := b.SendMessage(ctx, params)
		if err_msg != nil {
			rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_ACTIVITY_UNSUBSCRIBE", "b.SendMessage(ctx, params)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
		}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	case strings.HasPrefix(update.CallbackQuery.Data, "RELEVANC_PHONE"):
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			ShowAlert:       false,
		})

		params := &bot.SendMessageParams{
			ChatID:    update.CallbackQuery.From.ID,
			ParseMode: models.ParseModeHTML,
		}

		update_user_data := make(map[string]interface{})
		update_user_data["user_tg_id"] = update.Message.From.ID

		parts = strings.Split(update.CallbackQuery.Data, "::")
		data = parts[1]

		db_answer_code, activity := db.DB_GET_Activity_BY_ID(uint(current_user.TempActivityID))
		if db_answer_code == db.DB_ANSWER_SUCCESS {
			if data == "yes" {
				db.DB_UPDATE_Activity_ADD_Participants(uint(activity.ID), current_user.ID)
				params.Text = "–ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: " + activity.Title + " –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
				params.ReplyMarkup = keyboards.ListEvents

			} else {
				update_user_data["step"] = config.STEP_CHANGING_PHONE
				db.DB_UPDATE_User(update_user_data)

				params.Text = "–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ, –¥–∞–ª–µ–µ 10 —Ü–∏—Ñ—Ä"
				params.ReplyMarkup = keyboards.CreateKeyboard_Cancel("back")
			}

			_, err_msg := b.SendMessage(ctx, params)
			if err_msg != nil {
				rr_debug.PrintLOG("botHandlers.go", "BotHandler_CallbackQuery_RELEVANC_PHONE", "b.SendMessage(ctx, params)", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", err_msg.Error())
			}

		}

	}
}
