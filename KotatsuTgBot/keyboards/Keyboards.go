// ------------------------------------
// RR IT 2024
//
// ------------------------------------
// –ë–∞–∑–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –ö–æ—Ç–∞—Ü—É –±–æ—Ç–∞

package keyboards

import (
	//–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
	"rr/kotatsutgbot/db"

	//–°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
	"github.com/go-telegram/bot/models"

	//–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
	"fmt"
)

// ----------------------------------------------
//
//	–°—Ç—Ä—É–∫—Ç—É—Ä—ã
//
// ----------------------------------------------
// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
var Registration = &models.ReplyKeyboardMarkup{
	Keyboard: [][]models.KeyboardButton{
		{
			{Text: "üóÉ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"},
		},
	},
	ResizeKeyboard:  true,  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–º–µ–Ω—å—à–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
	OneTimeKeyboard: false, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

var Keyboard_GenderSelect = &models.ReplyKeyboardMarkup{
	Keyboard: [][]models.KeyboardButton{
		{
			{Text: "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –¥–µ–º–æ–Ω–æ–≤"},
			{Text: "–î–µ–≤–æ—á–∫–∞ –≤–æ–ª—à–µ–±–Ω–∏—Ü–∞"},
		},
	},
	ResizeKeyboard:  true,  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–º–µ–Ω—å—à–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
	OneTimeKeyboard: false, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

var Keyboard_WasAtEvents = &models.ReplyKeyboardMarkup{
	Keyboard: [][]models.KeyboardButton{
		{
			{Text: "–î–∞, —è —É–∂–µ –º–∞–Ω–¥–∞—Ä–∏–Ω–∫–∞"},
			{Text: "–ï—â—ë –Ω–µ—Ç :("},
		},
	},
	ResizeKeyboard:  true, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–º–µ–Ω—å—à–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
	OneTimeKeyboard: true, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

var Keyboard_WasntAtEvents = &models.ReplyKeyboardMarkup{
	Keyboard: [][]models.KeyboardButton{
		{
			{Text: "–•–æ—Ä–æ—à–æ, –∑–∞–ø–æ–ª–Ω—é –ø–æ–∑–∂–µ"},
			{Text: "–•–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"},
		},
	},
	ResizeKeyboard:  true, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–º–µ–Ω—å—à–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
	OneTimeKeyboard: true, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func CreateKeyboard_MainMenuButtonsDefault(news_letter bool) *models.ReplyKeyboardMarkup {
	/*var news_letter_text string
	if news_letter {
		news_letter_text = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
	} else {
		news_letter_text = "üì∞ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
	}*/

	var keyboard = &models.ReplyKeyboardMarkup{
		Keyboard: [][]models.KeyboardButton{
			{
				{Text: "‚õ© –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±"},
				{Text: "üìù –ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"},
			},
			/*{
				{Text: news_letter_text},
			},*/
		},
		ResizeKeyboard:  true,  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–º–µ–Ω—å—à–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
		OneTimeKeyboard: false, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	}
	return keyboard
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª—É–±–∞
func CreateKeyboard_MainMenuButtonsClubMember(news_letter bool) *models.ReplyKeyboardMarkup {
	/*var news_letter_text string
	if news_letter {
		news_letter_text = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
	} else {
		news_letter_text = "üì∞ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
	}*/

	var keyboard = &models.ReplyKeyboardMarkup{
		Keyboard: [][]models.KeyboardButton{
			{
				{Text: "üìù –ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"},
				// {Text: "ü§ù –ê–∫—Ü–∏–∏ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã"},
				{Text: "üìÇ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"},
			},
			{
				//{Text: news_letter_text},
				{Text: "üö™ –ü–æ–∫–∏–Ω—É—Ç—å –∫–ª—É–±"},
			},
		},
		ResizeKeyboard:  true,  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–º–µ–Ω—å—à–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
		OneTimeKeyboard: false, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	}
	return keyboard
}

var CommunicationManager = &models.ReplyKeyboardMarkup{
	Keyboard: [][]models.KeyboardButton{
		{
			{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
		},
	},
	ResizeKeyboard:  true,  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–º–µ–Ω—å—à–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
	OneTimeKeyboard: false, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª—É–±–∞
var ListEvents = &models.ReplyKeyboardMarkup{
	Keyboard: [][]models.KeyboardButton{
		{
			{Text: "üü° –ê–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞"},
		},
		{
			{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
		},
	},
	ResizeKeyboard:  true,  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–º–µ–Ω—å—à–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
	OneTimeKeyboard: false, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
var SelectedEvent = &models.ReplyKeyboardMarkup{
	Keyboard: [][]models.KeyboardButton{
		{
			{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"},
		},
		{
			{Text: "üü° –ê–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∞"},
		},
		{
			{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"},
		},
	},
	ResizeKeyboard:  true,  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–º–µ–Ω—å—à–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
	OneTimeKeyboard: false, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –µ—ë –∑–∞–ø—É—Å–∫–æ–º
func CreateKeyboard_AnimeRouletteStart(is_member bool) *models.ReplyKeyboardMarkup {

	var keyboard = &models.ReplyKeyboardMarkup{}

	if is_member {
		keyboard = &models.ReplyKeyboardMarkup{
			Keyboard: [][]models.KeyboardButton{
				{
					{Text: "üö™ –ü–æ–∫–∏–Ω—É—Ç—å —Ä—É–ª–µ—Ç–∫—É"},
				},
				{
					{Text: "üìã –ü—Ä–∞–≤–∏–ª–∞"},
					{Text: "üìö –ú–æ–π —Å–ø–∏—Å–æ–∫"},
				},
				{
					{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
				},
			},
			ResizeKeyboard:  true,
			OneTimeKeyboard: false,
		}
	} else {
		keyboard = &models.ReplyKeyboardMarkup{
			Keyboard: [][]models.KeyboardButton{
				{
					{Text: "‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫–µ"},
				},
				{
					{Text: "üìã –ü—Ä–∞–≤–∏–ª–∞"},
					{Text: "üìö –ú–æ–π —Å–ø–∏—Å–æ–∫"},
				},
				{
					{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
				},
			},
			ResizeKeyboard:  true,
			OneTimeKeyboard: false,
		}
	}

	return keyboard
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∏–º–µ —Ä—É–ª–µ—Ç–∫–∏ –∫–æ–≥–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞
func CreateKeyboard_AnimeRouletteMenu(is_member bool) *models.ReplyKeyboardMarkup {

	var keyboard = &models.ReplyKeyboardMarkup{}

	if is_member {
		keyboard = &models.ReplyKeyboardMarkup{
			Keyboard: [][]models.KeyboardButton{
				{
					{Text: "‚ùî –ó–∞–≥–∞–¥–∞—Ç—å –∞–Ω–∏–º–µ"},
				},
				{
					{Text: "üìã –ü—Ä–∞–≤–∏–ª–∞"},
					{Text: "üìî –¢–µ–º–∞"},
					{Text: "üìö –ú–æ–π —Å–ø–∏—Å–æ–∫"},
				},
				{
					{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
				},
			},
			ResizeKeyboard:  true,
			OneTimeKeyboard: false,
		}
	} else {
		keyboard = &models.ReplyKeyboardMarkup{
			Keyboard: [][]models.KeyboardButton{
				{
					{Text: "‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫–µ"},
				},
				{
					{Text: "üìã –ü—Ä–∞–≤–∏–ª–∞"},
					{Text: "üìî –¢–µ–º–∞"},
				},
				{
					{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
				},
			},
			ResizeKeyboard:  true,
			OneTimeKeyboard: false,
		}
	}

	return keyboard
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
func CreateKeyboard_Cancel(cancel_type string) *models.ReplyKeyboardMarkup {

	var keyboard = &models.ReplyKeyboardMarkup{}

	switch cancel_type {
	case "skip":
		keyboard = &models.ReplyKeyboardMarkup{
			Keyboard: [][]models.KeyboardButton{
				{
					{Text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"},
				},
				{
					{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
				},
			},
			ResizeKeyboard:  true,
			OneTimeKeyboard: false,
		}

	case "anime_roulette":
		keyboard = &models.ReplyKeyboardMarkup{
			Keyboard: [][]models.KeyboardButton{
				{
					{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä—É–ª–µ—Ç–∫–∏"},
				},
			},
			ResizeKeyboard:  true,
			OneTimeKeyboard: false,
		}

	default:
		keyboard = &models.ReplyKeyboardMarkup{
			Keyboard: [][]models.KeyboardButton{
				{
					{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
				},
			},
			ResizeKeyboard:  true,
			OneTimeKeyboard: false,
		}
	}

	return keyboard
}

// Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
func CreateInlineKbd_ActivitiesList(activities []db.Activity_ReadJSON, user_tg_id int64) *models.InlineKeyboardMarkup {
	inlineKeyboard := [][]models.InlineKeyboardButton{}

	var title string
	var formattedTime string

	// –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º —á—á:–º–º
	format := "02.01, 15:04"

	for _, activity := range activities {

		is_participant := false

		for _, participant := range activity.Participants {
			if participant.UserTgID == user_tg_id {
				is_participant = true
				break
			}
		}

		formattedTime = activity.DateMeeting.Format(format)
		if is_participant {
			title = "‚úÖ [" + formattedTime + "] " + activity.Title
		} else {
			title = "[" + formattedTime + "] " + activity.Title
		}

		row := []models.InlineKeyboardButton{
			{
				Text:         title,
				CallbackData: fmt.Sprintf("ACTIVITIES::%d", activity.ID),
			},
		}
		inlineKeyboard = append(inlineKeyboard, row)
	}

	return &models.InlineKeyboardMarkup{
		InlineKeyboard: inlineKeyboard,
	}
}

// Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
func CreateInlineKbd_PartnersList() *models.InlineKeyboardMarkup {
	//–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	inlineKeyboard := [][]models.InlineKeyboardButton{}

	row_1 := []models.InlineKeyboardButton{
		{
			Text:         "‚òïÔ∏è –ö–∞—Ñ–µ ¬´–¢–∞–π—è–∫–∏¬ª",
			CallbackData: fmt.Sprintf("PARTNERS::%s", "cafeTaiyaki"),
		},
	}

	row_2 := []models.InlineKeyboardButton{
		{
			Text:         "üåü –§–µ—Å—Ç–∏–≤–∞–ª—å GemFest [11.11]",
			CallbackData: fmt.Sprintf("PARTNERS::%s", "gemfest"),
		},
	}

	row_back := []models.InlineKeyboardButton{
		{
			Text:         "‚óÄÔ∏è –ù–∞–∑–∞–¥",
			CallbackData: fmt.Sprintf("PARTNERS::%s", "back"),
		},
	}

	inlineKeyboard = append(inlineKeyboard, row_1)
	inlineKeyboard = append(inlineKeyboard, row_2)
	inlineKeyboard = append(inlineKeyboard, row_back)

	return &models.InlineKeyboardMarkup{
		InlineKeyboard: inlineKeyboard,
	}
}

// Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
func CreateInlineKbd_MyActivitiesList(my_activities []*db.Activity) *models.InlineKeyboardMarkup {
	inlineKeyboard := [][]models.InlineKeyboardButton{}

	var title string
	var formattedTime string

	// –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º —á—á:–º–º
	format := "02.01 15:04"

	for _, activity := range my_activities {

		formattedTime = activity.DateMeeting.Format(format)
		title = "[" + formattedTime + "] " + activity.Title

		row := []models.InlineKeyboardButton{
			{
				Text:         title,
				CallbackData: fmt.Sprintf("MY_ACTIVITIES::%d", activity.ID),
			},
		}
		inlineKeyboard = append(inlineKeyboard, row)
	}

	return &models.InlineKeyboardMarkup{
		InlineKeyboard: inlineKeyboard,
	}
}

// Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
func CreateInlineKbd_SubscribeActivity(activity_id int) *models.InlineKeyboardMarkup {
	//–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	inlineKeyboard := [][]models.InlineKeyboardButton{}

	row := []models.InlineKeyboardButton{
		{
			Text:         "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
			CallbackData: fmt.Sprintf("ACTIVITY_SUBSCRIBE::%d", activity_id),
		},
	}

	inlineKeyboard = append(inlineKeyboard, row)

	return &models.InlineKeyboardMarkup{
		InlineKeyboard: inlineKeyboard,
	}
}

// Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
func CreateInlineKbd_UnsubscribeActivity(activity_id int) *models.InlineKeyboardMarkup {
	//–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	inlineKeyboard := [][]models.InlineKeyboardButton{}

	row := []models.InlineKeyboardButton{
		{
			Text:         "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
			CallbackData: fmt.Sprintf("ACTIVITY_UNSUBSCRIBE::%d", activity_id),
		},
	}

	inlineKeyboard = append(inlineKeyboard, row)

	return &models.InlineKeyboardMarkup{
		InlineKeyboard: inlineKeyboard,
	}
}

// Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±
func CreateInlineKbd_JoinClub() *models.InlineKeyboardMarkup {
	//–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	inlineKeyboard := [][]models.InlineKeyboardButton{}

	row_1 := []models.InlineKeyboardButton{
		{
			Text:         "–Ø —Å—Ç—É–¥–µ–Ω—Ç/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫/–≤—ã–ø—É—Å–∫–Ω–∏–∫ –ò–¢–ú–û",
			CallbackData: fmt.Sprintf("JOIN_CLUB::%s", "from_ITMO"),
		},
	}

	row_2 := []models.InlineKeyboardButton{
		{
			Text:         "–Ø –Ω–µ –∏–∑ –ò–¢–ú–û",
			CallbackData: fmt.Sprintf("JOIN_CLUB::%s", "not_from_ITMO"),
		},
	}

	inlineKeyboard = append(inlineKeyboard, row_1)
	inlineKeyboard = append(inlineKeyboard, row_2)

	return &models.InlineKeyboardMarkup{
		InlineKeyboard: inlineKeyboard,
	}
}

// Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func CreateInlineKbd_RelevancePhoneNumber() *models.InlineKeyboardMarkup {
	//–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	inlineKeyboard := [][]models.InlineKeyboardButton{}

	row_1 := []models.InlineKeyboardButton{
		{
			Text:         "–ù–æ–º–µ—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã–π, –ø–∞—Å–ø–æ—Ä—Ç –≤–æ–∑—å–º—É",
			CallbackData: fmt.Sprintf("RELEVANC_PHONE::%s", "yes"),
		},
	}

	row_2 := []models.InlineKeyboardButton{
		{
			Text:         "–£ –º–µ–Ω—è –ø–æ–º–µ–Ω—è–ª—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
			CallbackData: fmt.Sprintf("RELEVANC_PHONE::%s", "no"),
		},
	}

	inlineKeyboard = append(inlineKeyboard, row_1)
	inlineKeyboard = append(inlineKeyboard, row_2)

	return &models.InlineKeyboardMarkup{
		InlineKeyboard: inlineKeyboard,
	}
}

// Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–¥–ª—è –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª—É–±–∞)
func CreateInlineKbd_Appointment() *models.InlineKeyboardMarkup {
	//–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	inlineKeyboard := [][]models.InlineKeyboardButton{}

	row_1 := []models.InlineKeyboardButton{
		{
			Text:         "–Ø —Å—Ç—É–¥–µ–Ω—Ç/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫/–≤—ã–ø—É—Å–∫–Ω–∏–∫ –ò–¢–ú–û",
			CallbackData: fmt.Sprintf("APPOINTMENT::%s", "from_ITMO"),
		},
	}

	row_2 := []models.InlineKeyboardButton{
		{
			Text:         "–Ø –Ω–µ –∏–∑ –ò–¢–ú–û",
			CallbackData: fmt.Sprintf("APPOINTMENT::%s", "not_from_ITMO"),
		},
	}

	inlineKeyboard = append(inlineKeyboard, row_1)
	inlineKeyboard = append(inlineKeyboard, row_2)

	return &models.InlineKeyboardMarkup{
		InlineKeyboard: inlineKeyboard,
	}
}

func CreateKeyboard_RequestContact() *models.ReplyKeyboardMarkup {
	return &models.ReplyKeyboardMarkup{
		Keyboard: [][]models.KeyboardButton{
			{
				{
					Text:           "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä",
					RequestContact: true,
				},
				{Text: "–Ø –Ω–µ –ø–æ–ª—å–∑—É—é—Å—å –Ω–æ–º–µ—Ä–æ–º, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω Telegram"},
			}, {
				{Text: "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
			},
		},
		ResizeKeyboard:  true,
		OneTimeKeyboard: false,
	}
}
